<?php

namespace AppBundle\Repository;

/**
 * BienRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BienRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Recherche du bien par son ID pour AutrebienType.php
     */
    public function findBien($bien)
    {
        return $q = $this->createQueryBuilder('b')
                         ->where('b.id = :id')
                         ->setParameter('id', $bien)
            ;
    }

    /**
     * Liste des bien par ordre decroissant
     */
    public function findAllDesc($partenaire = null)
    {
        if ($partenaire){
           return $this->createQueryBuilder('b')
                        ->leftJoin('b.partenaire','p')
                        ->where('p.slug LIKE :slug')
                        ->orderBy('b.id', 'DESC')
                        ->setParameter('slug', $partenaire)
                        ->getQuery()->getResult()
                ;
        }else{
            return $q = $this->createQueryBuilder('b')
                ->orderBy('b.id', 'DESC')
                ->getQuery()->getResult()
                ;
        }
    }

    /**
     * Liste d'un certains nombres de bien
     */
    public function findListBien($offset, $limit)
    {
        return $q = $this->QueryBien()
                         ->setFirstResult($offset)
                         ->setMaxResults($limit)
                         ->getQuery()->getResult()
            ;
    }

    /**
     * Bien en publicitÃ©
     */
    public function findBienEnPromo($offset, $limit)
    {
        return $q = $this->createQueryBuilder('b')
                         ->where('b.datedebut <= :date')
                         ->andWhere('b.datefin >= :date')
                         ->orderBy('b.datedebut', 'ASC')
                         ->setFirstResult($offset)
                         ->setMaxResults($limit)
                         ->setParameters(array(
                             'date' => date('Y-m-d', time())
                         ))
                         ->getQuery()->getResult()
            ;
    }

    /**
     * Liste des derniers bien et en promotion
     */
    public function findDernierBienEnPromo($limit, $offset)
    {
        return $q = $this->QueryBien()
                         ->addOrderBy('b.promotion', 'ASC')
                         ->setFirstResult($offset)
                         ->setMaxResults($limit)
                         ->getQuery()->getResult()
            ;
    }

    /**
     * Liste des biens du partenaires
     */
    public function findBienPartenaire($partenaire, $limit=null, $offset=null)
    {
        return $this->QueryBien()
                    ->innerJoin('b.partenaire', 'p')
                    ->where('p.slug = :partenaire')
                    ->addOrderBy('b.promotion', 'DESC')
                    ->setFirstResult($offset)
                    ->setMaxResults($limit)
                    ->setParameter('partenaire', $partenaire)
                    ->getQuery()->getResult();
            ;
    }

    /**
     *
     */
    public function findBienR($typebien, $whereZone, $localisation)
    {
        if (!$localisation) $localisation = null; //ump($localisation);die();
        return $q = $this->createQueryBuilder('b')
                    ->innerJoin('b.zone', 'z')
                    ->where('b.typebien = :typebien')
                    ->andWhere($whereZone)
                    ->setParameters(array(
                        'typebien' => $typebien,
                        'localite'  => $localisation,
                    ))
                    ->getQuery()->getResult();
            ;

    }

    /**
     * Liste des biens selon la zone
     */
    public function findBienZone($localisation, $wherePrix, $min, $max, $mode, $limit, $offset)
    {
        return $this->QueryBien()
                    ->innerJoin('b.zone', 'z')
                    ->innerJoin('b.mode', 'm')
                    ->where('z.libelle = :zone')
                    ->andWhere('m.libelle = :mode')
                    ->andWhere($wherePrix)
                    ->setFirstResult($offset)
                    ->setMaxResults($limit)
                    ->setParameters(array(
                        'zone'  => $localisation,
                        'min'   => $min,
                        'max'   => $max,
                        'mode'  => $mode,
                    ))
                    ->getQuery()->getResult()
            ;
    }

    /**
     * fonction de recherche
     */
    public function QueryBien()
    {
        return $q = $this->createQueryBuilder('b')
                         ->orderBy('b.id', 'DESC')
            ;
    }
}
